app.ConfigureExceptionHandler();


public static class ExceptionMiddlewareExtension
    {
        static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        public static void ConfigureExceptionHandler(this IApplicationBuilder app)
        {
            app.UseExceptionHandler(appError =>
            {
                appError.Run(async context =>
                {
                    context.Response.StatusCode =  (int)HttpStatusCode.InternalServerError;
                    context.Response.ContentType = "application/json";
                    var contextFeature = context.Features.Get<IExceptionHandlerFeature>();

                    if (contextFeature != null)
                    {
                        log.Error($"{ExceptionHelper.GetMessages(contextFeature.Error)}");

                        await context.Response.WriteAsync(new ErrorDetails()
                        {
                            StatusCode = context.Response.StatusCode,
#if DEBUG
                            Message = ExceptionHelper.GetMessages(contextFeature.Error)
#else
                            Message = "Internal Server Error."
#endif
                        }.ToString());

                    }
                });
            });
        }
    }